// imu

#include <ros.h> 
#include <ros/time.h> 
#include <sensor_msgs/imu.h> 

unsigned long imu_timer; //Used to measure 50 ms interval 

// instantiate node handle and publisher for  
// a sensor_msgs/Imu message (topic name is /ultrasound) 

ros::NodeHandle nh; 
sensor_msgs::Imu imu_msg; 
ros::Publisher pub_imu( "imu", &imu_msg); 

void setup() 
{ 
// initialize the node and message publisher 
nh.getHardware()->setBaud(57600);
nh.initNode(); 
nh.advertise(pub_imu); 

// fill the fixed fields in the imu_msg 
range_msg.header.frame_id = "/imu"; 
} 

//geometry_msgs/Quaternion orientation
//float64[9] orientation_covariance # Row major about x, y, z axes

//geometry_msgs/Vector3 angular_velocity
//float64[9] angular_velocity_covariance # Row major about x, y, z axes

//geometry_msgs/Vector3 linear_acceleration
//float64[9] linear_acceleration_covariance # Row major x, y z 



void loop() 
{ 
// sample the range data from the imu and 
// publish the range value once every 50 milliseconds 
if ( (millis()-range_timer) > 50) 
{ 
imu_msg.xxxxx =  
imu_msg.header.stamp = nh.now(); 

pub_range.publish(&imu_msg); 
imu_timer = millis() + 50; 
} 
nh.spinOnce(); 
} 
